{"version":3,"sources":["../../src/index.tsx","Input.jsx","App.js","index.js"],"names":["useForm","initialData","schema","options","trim","validateOnChange","showAllErrors","validateOnMount","data","setData","errors","setErrors","validateData","errorMsg","validate","abortEarly","handleChange","e","parseNum","target","type","name","val","checked","multiple","value","test","parseFloat","isNaN","Array","from","filter","el","selected","map","getSelectedValues","schemaName","config","sameAs","label","error","prevData","handleSubmit","callback","preventDefault","Input","props","Form","Group","Label","Control","isInvalid","Text","className","username","jm","str","alphanum","min","email","password","address","confirmPassword","App","useState","show","setShow","console","log","handleClose","handleShow","Container","Navbar","Brand","href","Nav","Button","variant","onSubmit","onChange","block","Modal","onHide","Header","closeButton","Title","Body","JSON","stringify","Footer","onClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5ebb5dcd.chunk.js","sourcesContent":["import jm from 'json-msg'\r\nimport React, { useEffect, useCallback, useState } from 'react'\r\n\r\ninterface Config {\r\n  message: object\r\n  allow?: any[]\r\n  isJsonMsg: true\r\n  label?: string\r\n  config: {\r\n    [key: string]: string\r\n  }\r\n}\r\nexport interface Schema {\r\n  [key: string]: Config\r\n}\r\nexport interface Option {\r\n  /**\r\n   * Trim all the string in data\r\n   * @default\r\n   * false\r\n   */\r\n  trim?: boolean\r\n  validateOnChange?: boolean,\r\n  validateOnMount?: boolean,\r\n  showAllErrors?: boolean\r\n}\r\n\r\ninterface Data {\r\n  [key: string]: any\r\n}\r\n\r\nfunction getSelectedValues(options: any[]) {\r\n  return Array.from(options)\r\n    .filter(el => el.selected)\r\n    .map(el => el.value);\r\n};\r\n\r\nfunction useForm(initialData: Data = {},schema?: Schema,options: Option = {},) {\r\n\r\n  const { trim = false , validateOnChange = true , showAllErrors , validateOnMount} = options;\r\n\r\n  const [data, setData] = useState<Data>(initialData)\r\n  const [errors, setErrors] = useState<Schema | null | {}>({});\r\n\r\n  function validateData(data: Data){\r\n    if (!schema)return null;\r\n    const errorMsg = jm.validate(data, schema, {\r\n      abortEarly: false,\r\n      showAllErrors\r\n    })\r\n    if (errorMsg) setErrors(errorMsg);\r\n    else setErrors({});\r\n    return errorMsg\r\n  };\r\n\r\n  useEffect(()=>{\r\n    validateOnMount && validateData(data);\r\n  },[]);\r\n \r\n  const handleChange = useCallback((e: React.ChangeEvent<any>) => {\r\n    const {\r\n      type,\r\n      name,\r\n      value: val,\r\n      checked,\r\n      options,\r\n      multiple,\r\n    } = e.target;\r\n    let parseNum;\r\n    let value = /number|range/.test(type)\r\n    ? (parseNum = parseFloat(val), isNaN(parseNum) ? '' : parseNum)\r\n    : /checkbox/.test(type) // checkbox\r\n    ? checked\r\n    : options && multiple // <select multiple>\r\n    ? getSelectedValues(options)\r\n    : val;\r\n\r\n    const schemaName = schema && schema[name];\r\n\r\n    if (trim && typeof value === 'string') value = value.trim()\r\n    \r\n    if (validateOnChange && schemaName && !schemaName.config.sameAs) {\r\n      schemaName.label = schemaName.label || name;\r\n\r\n      const errorMsg = jm.validate(value, schemaName,{showAllErrors})\r\n\r\n\r\n      setErrors((error) => {\r\n        if (errorMsg) return { ...error, [name]: errorMsg };\r\n\r\n        error && delete error[name];\r\n\r\n        return error\r\n      })\r\n    }\r\n\r\n    setData((prevData) => ({ ...prevData, [name]: value }))\r\n  }, [])\r\n  \r\n  type func = (data: Data)=> any;\r\n\r\n  const handleSubmit = useCallback((callback: func) => {\r\n    return (e: React.FormEvent<HTMLFormElement>) => {\r\n      e.preventDefault()\r\n      // Access data from setData since this function is wrap on useCallback\r\n      // This is better than recomputing Everytime the data changes\r\n      setData((prevData: Data) => {\r\n        const errorMsg = validateData(prevData);\r\n        if (errorMsg) return prevData;\r\n\r\n        callback && callback(prevData)\r\n        return prevData\r\n      })\r\n    }\r\n  }, [])\r\n  return { data, handleChange, handleSubmit, errors }\r\n}\r\n\r\nexport { useForm }\r\nexport default jm\r\n","import { Form } from \"react-bootstrap\";\r\n\r\nfunction Input({ error, label, ...props }) {\r\n  return (\r\n    <Form.Group>\r\n      <Form.Label>{label}</Form.Label>\r\n      <Form.Control {...props} isInvalid={!!error} />\r\n      <Form.Text className=\"text-danger\">{error}</Form.Text>\r\n    </Form.Group>\r\n  );\r\n}\r\n\r\nexport default Input;\r\n","import React, { useState } from \"react\";\r\nimport jm, { useForm } from \"json-msg-react\";\r\nimport { Button, Form, Container, Modal, Navbar, Nav } from \"react-bootstrap\";\r\nimport Input from \"./Input\";\r\n\r\nconst schema = {\r\n  username: jm.str({ alphanum: true, min: 5 }),\r\n  email: jm.str({ email: true }),\r\n  password: jm.str({ min: 5 }),\r\n  address: jm.str({ min: 4 }),\r\n  confirmPassword: jm.sameAs(\"password\"),\r\n};\r\n\r\nconst initialData = {\r\n  username: \"darkcris1\",\r\n};\r\nconst App = () => {\r\n  const [show, setShow] = useState(false);\r\n\r\n  const { handleChange, handleSubmit, errors, data } = useForm(\r\n    initialData,\r\n    schema\r\n  );\r\n\r\n  function onSubmit(data) {\r\n    console.log(data);\r\n    handleShow();\r\n  }\r\n  console.log(errors);\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  return (\r\n    <Container>\r\n      <Navbar className=\"shadow-sm\">\r\n        <Navbar.Brand href=\"/\">JSON-MSG REACT</Navbar.Brand>\r\n        <Nav className=\"ml-auto\">\r\n          <Button\r\n            variant=\"secondary\"\r\n            className=\"mr-2\"\r\n            href=\"https://github.com/darkcris1/json-msg-react/blob/master/example/src/App.js\"\r\n          >\r\n            View Code\r\n          </Button>\r\n          <Button\r\n            variant=\"warning\"\r\n            href=\"https://github.com/darkcris1/json-msg-react\"\r\n          >\r\n            Star On Github\r\n          </Button>\r\n        </Nav>\r\n      </Navbar>\r\n      <Form onSubmit={handleSubmit(onSubmit)} className=\"w-75 mx-auto mt-5\">\r\n        <Input\r\n          error={errors.username}\r\n          label=\"Username\"\r\n          value={data.username}\r\n          name=\"username\"\r\n          onChange={handleChange}\r\n        />\r\n        <Input\r\n          error={errors.email}\r\n          label=\"Email\"\r\n          name=\"email\"\r\n          onChange={handleChange}\r\n        />\r\n        <Input\r\n          error={errors.password}\r\n          label=\"Password\"\r\n          name=\"password\"\r\n          type=\"password\"\r\n          onChange={handleChange}\r\n        />\r\n        <Input\r\n          error={errors.confirmPassword}\r\n          label=\"Confirm Password\"\r\n          name=\"confirmPassword\"\r\n          type=\"password\"\r\n          onChange={handleChange}\r\n        />\r\n        <Input\r\n          error={errors.address}\r\n          label=\"Address\"\r\n          name=\"address\"\r\n          onChange={handleChange}\r\n        />\r\n        <Button variant=\"success\" block className=\"w-100\" type=\"submit\">\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Form Submitted</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <pre>{JSON.stringify(data, null, 2)}</pre>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={handleClose}>\r\n            Review\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}